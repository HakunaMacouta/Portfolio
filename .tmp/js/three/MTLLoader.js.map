{"version":3,"sources":["three/MTLLoader.js"],"names":["THREE","MTLLoader","manager","undefined","DefaultLoadingManager","prototype","constructor","load","url","onLoad","onProgress","onError","scope","loader","FileLoader","setPath","path","text","parse","setTexturePath","texturePath","setBaseUrl","console","warn","setCrossOrigin","value","crossOrigin","setMaterialOptions","materialOptions","lines","split","info","delimiter_pattern","materialsInfo","i","length","line","trim","charAt","pos","indexOf","key","substring","toLowerCase","name","ss","parseFloat","materialCreator","MaterialCreator","setManager","setMaterials","baseUrl","options","materials","materialsArray","nameLookup","side","FrontSide","wrap","RepeatWrapping","convert","converted","mn","mat","covmat","prop","save","lprop","normalizeRGB","ignoreZeroRGBs","preload","create","getIndex","materialName","getAsArray","index","createMaterial_","params","resolveURL","test","setMapForType","mapType","texParams","getTextureParams","map","loadTexture","repeat","copy","scale","offset","wrapS","wrapT","n","color","Color","fromArray","specular","shininess","opacity","transparent","MeshPhongMaterial","matParams","Vector2","items","bumpScale","splice","set","join","mapping","texture","Loader","Handlers","get","TextureLoader"],"mappings":"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","file":"MTLLoader.js","sourcesContent":["/**\n * Loads a Wavefront .mtl file specifying materials\n *\n * @author angelxuanchang\n */\n\nTHREE.MTLLoader = function ( manager ) {\n\n    this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nTHREE.MTLLoader.prototype = {\n\n    constructor: THREE.MTLLoader,\n\n    /**\n     * Loads and parses a MTL asset from a URL.\n     *\n     * @param {String} url - URL to the MTL file.\n     * @param {Function} [onLoad] - Callback invoked with the loaded object.\n     * @param {Function} [onProgress] - Callback for download progress.\n     * @param {Function} [onError] - Callback for download errors.\n     *\n     * @see setPath setTexturePath\n     *\n     * @note In order for relative texture references to resolve correctly\n     * you must call setPath and/or setTexturePath explicitly prior to load.\n     */\n    load: function ( url, onLoad, onProgress, onError ) {\n\n        var scope = this;\n\n        var loader = new THREE.FileLoader( this.manager );\n        loader.setPath( this.path );\n        loader.load( url, function ( text ) {\n\n            onLoad( scope.parse( text ) );\n\n        }, onProgress, onError );\n\n    },\n\n    /**\n     * Set base path for resolving references.\n     * If set this path will be prepended to each loaded and found reference.\n     *\n     * @see setTexturePath\n     * @param {String} path\n     *\n     * @example\n     *     mtlLoader.setPath( 'assets/obj/' );\n     *     mtlLoader.load( 'my.mtl', ... );\n     */\n    setPath: function ( path ) {\n\n        this.path = path;\n\n    },\n\n    /**\n     * Set base path for resolving texture references.\n     * If set this path will be prepended found texture reference.\n     * If not set and setPath is, it will be used as texture base path.\n     *\n     * @see setPath\n     * @param {String} path\n     *\n     * @example\n     *     mtlLoader.setPath( 'assets/obj/' );\n     *     mtlLoader.setTexturePath( 'assets/textures/' );\n     *     mtlLoader.load( 'my.mtl', ... );\n     */\n    setTexturePath: function ( path ) {\n\n        this.texturePath = path;\n\n    },\n\n    setBaseUrl: function ( path ) {\n\n        console.warn( 'THREE.MTLLoader: .setBaseUrl() is deprecated. Use .setTexturePath( path ) for texture path or .setPath( path ) for general base path instead.' );\n\n        this.setTexturePath( path );\n\n    },\n\n    setCrossOrigin: function ( value ) {\n\n        this.crossOrigin = value;\n\n    },\n\n    setMaterialOptions: function ( value ) {\n\n        this.materialOptions = value;\n\n    },\n\n    /**\n     * Parses a MTL file.\n     *\n     * @param {String} text - Content of MTL file\n     * @return {THREE.MTLLoader.MaterialCreator}\n     *\n     * @see setPath setTexturePath\n     *\n     * @note In order for relative texture references to resolve correctly\n     * you must call setPath and/or setTexturePath explicitly prior to parse.\n     */\n    parse: function ( text ) {\n\n        var lines = text.split( '\\n' );\n        var info = {};\n        var delimiter_pattern = /\\s+/;\n        var materialsInfo = {};\n\n        for ( var i = 0; i < lines.length; i ++ ) {\n\n            var line = lines[ i ];\n            line = line.trim();\n\n            if ( line.length === 0 || line.charAt( 0 ) === '#' ) {\n\n                // Blank line or comment ignore\n                continue;\n\n            }\n\n            var pos = line.indexOf( ' ' );\n\n            var key = ( pos >= 0 ) ? line.substring( 0, pos ) : line;\n            key = key.toLowerCase();\n\n            var value = ( pos >= 0 ) ? line.substring( pos + 1 ) : '';\n            value = value.trim();\n\n            if ( key === 'newmtl' ) {\n\n                // New material\n\n                info = { name: value };\n                materialsInfo[ value ] = info;\n\n            } else if ( info ) {\n\n                if ( key === 'ka' || key === 'kd' || key === 'ks' ) {\n\n                    var ss = value.split( delimiter_pattern, 3 );\n                    info[ key ] = [ parseFloat( ss[ 0 ] ), parseFloat( ss[ 1 ] ), parseFloat( ss[ 2 ] ) ];\n\n                } else {\n\n                    info[ key ] = value;\n\n                }\n\n            }\n\n        }\n\n        var materialCreator = new THREE.MTLLoader.MaterialCreator( this.texturePath || this.path, this.materialOptions );\n        materialCreator.setCrossOrigin( this.crossOrigin );\n        materialCreator.setManager( this.manager );\n        materialCreator.setMaterials( materialsInfo );\n        return materialCreator;\n\n    }\n\n};\n\n/**\n * Create a new THREE-MTLLoader.MaterialCreator\n * @param baseUrl - Url relative to which textures are loaded\n * @param options - Set of options on how to construct the materials\n *                  side: Which side to apply the material\n *                        THREE.FrontSide (default), THREE.BackSide, THREE.DoubleSide\n *                  wrap: What type of wrapping to apply for textures\n *                        THREE.RepeatWrapping (default), THREE.ClampToEdgeWrapping, THREE.MirroredRepeatWrapping\n *                  normalizeRGB: RGBs need to be normalized to 0-1 from 0-255\n *                                Default: false, assumed to be already normalized\n *                  ignoreZeroRGBs: Ignore values of RGBs (Ka,Kd,Ks) that are all 0's\n *                                  Default: false\n * @constructor\n */\n\nTHREE.MTLLoader.MaterialCreator = function ( baseUrl, options ) {\n\n    this.baseUrl = baseUrl || '';\n    this.options = options;\n    this.materialsInfo = {};\n    this.materials = {};\n    this.materialsArray = [];\n    this.nameLookup = {};\n\n    this.side = ( this.options && this.options.side ) ? this.options.side : THREE.FrontSide;\n    this.wrap = ( this.options && this.options.wrap ) ? this.options.wrap : THREE.RepeatWrapping;\n\n};\n\nTHREE.MTLLoader.MaterialCreator.prototype = {\n\n    constructor: THREE.MTLLoader.MaterialCreator,\n\n    crossOrigin: 'Anonymous',\n\n    setCrossOrigin: function ( value ) {\n\n        this.crossOrigin = value;\n\n    },\n\n    setManager: function ( value ) {\n\n        this.manager = value;\n\n    },\n\n    setMaterials: function ( materialsInfo ) {\n\n        this.materialsInfo = this.convert( materialsInfo );\n        this.materials = {};\n        this.materialsArray = [];\n        this.nameLookup = {};\n\n    },\n\n    convert: function ( materialsInfo ) {\n\n        if ( ! this.options ) return materialsInfo;\n\n        var converted = {};\n\n        for ( var mn in materialsInfo ) {\n\n            // Convert materials info into normalized form based on options\n\n            var mat = materialsInfo[ mn ];\n\n            var covmat = {};\n\n            converted[ mn ] = covmat;\n\n            for ( var prop in mat ) {\n\n                var save = true;\n                var value = mat[ prop ];\n                var lprop = prop.toLowerCase();\n\n                switch ( lprop ) {\n\n                    case 'kd':\n                    case 'ka':\n                    case 'ks':\n\n                        // Diffuse color (color under white light) using RGB values\n\n                        if ( this.options && this.options.normalizeRGB ) {\n\n                            value = [ value[ 0 ] / 255, value[ 1 ] / 255, value[ 2 ] / 255 ];\n\n                        }\n\n                        if ( this.options && this.options.ignoreZeroRGBs ) {\n\n                            if ( value[ 0 ] === 0 && value[ 1 ] === 0 && value[ 2 ] === 0 ) {\n\n                                // ignore\n\n                                save = false;\n\n                            }\n\n                        }\n\n                        break;\n\n                    default:\n\n                        break;\n\n                }\n\n                if ( save ) {\n\n                    covmat[ lprop ] = value;\n\n                }\n\n            }\n\n        }\n\n        return converted;\n\n    },\n\n    preload: function () {\n\n        for ( var mn in this.materialsInfo ) {\n\n            this.create( mn );\n\n        }\n\n    },\n\n    getIndex: function ( materialName ) {\n\n        return this.nameLookup[ materialName ];\n\n    },\n\n    getAsArray: function () {\n\n        var index = 0;\n\n        for ( var mn in this.materialsInfo ) {\n\n            this.materialsArray[ index ] = this.create( mn );\n            this.nameLookup[ mn ] = index;\n            index ++;\n\n        }\n\n        return this.materialsArray;\n\n    },\n\n    create: function ( materialName ) {\n\n        if ( this.materials[ materialName ] === undefined ) {\n\n            this.createMaterial_( materialName );\n\n        }\n\n        return this.materials[ materialName ];\n\n    },\n\n    createMaterial_: function ( materialName ) {\n\n        // Create material\n\n        var scope = this;\n        var mat = this.materialsInfo[ materialName ];\n        var params = {\n\n            name: materialName,\n            side: this.side\n\n        };\n\n        function resolveURL( baseUrl, url ) {\n\n            if ( typeof url !== 'string' || url === '' )\n                return '';\n\n            // Absolute URL\n            if ( /^https?:\\/\\//i.test( url ) ) return url;\n\n            return baseUrl + url;\n\n        }\n\n        function setMapForType( mapType, value ) {\n\n            if ( params[ mapType ] ) return; // Keep the first encountered texture\n\n            var texParams = scope.getTextureParams( value, params );\n            var map = scope.loadTexture( resolveURL( scope.baseUrl, texParams.url ) );\n\n            map.repeat.copy( texParams.scale );\n            map.offset.copy( texParams.offset );\n\n            map.wrapS = scope.wrap;\n            map.wrapT = scope.wrap;\n\n            params[ mapType ] = map;\n\n        }\n\n        for ( var prop in mat ) {\n\n            var value = mat[ prop ];\n            var n;\n\n            if ( value === '' ) continue;\n\n            switch ( prop.toLowerCase() ) {\n\n                // Ns is material specular exponent\n\n                case 'kd':\n\n                    // Diffuse color (color under white light) using RGB values\n\n                    params.color = new THREE.Color().fromArray( value );\n\n                    break;\n\n                case 'ks':\n\n                    // Specular color (color when light is reflected from shiny surface) using RGB values\n                    params.specular = new THREE.Color().fromArray( value );\n\n                    break;\n\n                case 'map_kd':\n\n                    // Diffuse texture map\n\n                    setMapForType( \"map\", value );\n\n                    break;\n\n                case 'map_ks':\n\n                    // Specular map\n\n                    setMapForType( \"specularMap\", value );\n\n                    break;\n\n                case 'norm':\n\n                    setMapForType( \"normalMap\", value );\n\n                    break;\n\n                case 'map_bump':\n                case 'bump':\n\n                    // Bump texture map\n\n                    setMapForType( \"bumpMap\", value );\n\n                    break;\n\n                case 'ns':\n\n                    // The specular exponent (defines the focus of the specular highlight)\n                    // A high exponent results in a tight, concentrated highlight. Ns values normally range from 0 to 1000.\n\n                    params.shininess = parseFloat( value );\n\n                    break;\n\n                case 'd':\n                    n = parseFloat( value );\n\n                    if ( n < 1 ) {\n\n                        params.opacity = n;\n                        params.transparent = true;\n\n                    }\n\n                    break;\n\n                case 'tr':\n                    n = parseFloat( value );\n\n                    if ( n > 0 ) {\n\n                        params.opacity = 1 - n;\n                        params.transparent = true;\n\n                    }\n\n                    break;\n\n                default:\n                    break;\n\n            }\n\n        }\n\n        this.materials[ materialName ] = new THREE.MeshPhongMaterial( params );\n        return this.materials[ materialName ];\n\n    },\n\n    getTextureParams: function ( value, matParams ) {\n\n        var texParams = {\n\n            scale: new THREE.Vector2( 1, 1 ),\n            offset: new THREE.Vector2( 0, 0 )\n\n        };\n\n        var items = value.split( /\\s+/ );\n        var pos;\n\n        pos = items.indexOf( '-bm' );\n\n        if ( pos >= 0 ) {\n\n            matParams.bumpScale = parseFloat( items[ pos + 1 ] );\n            items.splice( pos, 2 );\n\n        }\n\n        pos = items.indexOf( '-s' );\n\n        if ( pos >= 0 ) {\n\n            texParams.scale.set( parseFloat( items[ pos + 1 ] ), parseFloat( items[ pos + 2 ] ) );\n            items.splice( pos, 4 ); // we expect 3 parameters here!\n\n        }\n\n        pos = items.indexOf( '-o' );\n\n        if ( pos >= 0 ) {\n\n            texParams.offset.set( parseFloat( items[ pos + 1 ] ), parseFloat( items[ pos + 2 ] ) );\n            items.splice( pos, 4 ); // we expect 3 parameters here!\n\n        }\n\n        texParams.url = items.join( ' ' ).trim();\n        return texParams;\n\n    },\n\n    loadTexture: function ( url, mapping, onLoad, onProgress, onError ) {\n\n        var texture;\n        var loader = THREE.Loader.Handlers.get( url );\n        var manager = ( this.manager !== undefined ) ? this.manager : THREE.DefaultLoadingManager;\n\n        if ( loader === null ) {\n\n            loader = new THREE.TextureLoader( manager );\n\n        }\n\n        if ( loader.setCrossOrigin ) loader.setCrossOrigin( this.crossOrigin );\n        texture = loader.load( url, onLoad, onProgress, onError );\n\n        if ( mapping !== undefined ) texture.mapping = mapping;\n\n        return texture;\n\n    }\n\n};"]}