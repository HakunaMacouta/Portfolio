{"version":3,"sources":["Boid.js"],"names":["Boid","vector","THREE","Vector3","_acceleration","_width","_height","_depth","_goal","_neighborhoodRadius","_maxSpeed","_maxSteerForce","_avoidWalls","position","velocity","setGoal","target","setAvoidWalls","value","setWorldSize","width","height","depth","run","boids","set","y","z","avoid","multiplyScalar","add","x","Math","random","flock","move","reach","alignment","cohesion","separation","l","length","divideScalar","checkBounds","steer","copy","sub","distanceToSquared","repulse","distance","distanceTo","subVectors","amount","count","velSum","i","il","boid","posSum","normalize"],"mappings":"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","file":"Boid.js","sourcesContent":["var Boid = function() {\n\n    var vector = new THREE.Vector3(),\n        _acceleration, _width = 500, _height = 500, _depth = 200, _goal, _neighborhoodRadius = 100,\n        _maxSpeed = 4, _maxSteerForce = 0.1, _avoidWalls = false;\n\n    this.position = new THREE.Vector3();\n    this.velocity = new THREE.Vector3();\n    _acceleration = new THREE.Vector3();\n\n    this.setGoal = function ( target ) {\n\n        _goal = target;\n\n    };\n\n    this.setAvoidWalls = function ( value ) {\n\n        _avoidWalls = value;\n\n    };\n\n    this.setWorldSize = function ( width, height, depth ) {\n\n        _width = width;\n        _height = height;\n        _depth = depth;\n\n    };\n\n    this.run = function ( boids ) {\n\n        if ( _avoidWalls ) {\n\n            vector.set( - _width, this.position.y, this.position.z );\n            vector = this.avoid( vector );\n            vector.multiplyScalar( 5 );\n            _acceleration.add( vector );\n\n            vector.set( _width, this.position.y, this.position.z );\n            vector = this.avoid( vector );\n            vector.multiplyScalar( 5 );\n            _acceleration.add( vector );\n\n            vector.set( this.position.x, - _height, this.position.z );\n            vector = this.avoid( vector );\n            vector.multiplyScalar( 5 );\n            _acceleration.add( vector );\n\n            vector.set( this.position.x, _height, this.position.z );\n            vector = this.avoid( vector );\n            vector.multiplyScalar( 5 );\n            _acceleration.add( vector );\n\n            vector.set( this.position.x, this.position.y, - _depth );\n            vector = this.avoid( vector );\n            vector.multiplyScalar( 5 );\n            _acceleration.add( vector );\n\n            vector.set( this.position.x, this.position.y, _depth );\n            vector = this.avoid( vector );\n            vector.multiplyScalar( 5 );\n            _acceleration.add( vector );\n\n        }/* else {\n\n\t\t\t\t\t\tthis.checkBounds();\n\n\t\t\t\t\t}\n\t\t\t\t\t*/\n\n        if ( Math.random() > 0.5 ) {\n\n            this.flock( boids );\n\n        }\n\n        this.move();\n\n    };\n\n    this.flock = function ( boids ) {\n\n        if ( _goal ) {\n\n            _acceleration.add( this.reach( _goal, 0.005 ) );\n\n        }\n\n        _acceleration.add( this.alignment( boids ) );\n        _acceleration.add( this.cohesion( boids ) );\n        _acceleration.add( this.separation( boids ) );\n\n    };\n\n    this.move = function () {\n\n        this.velocity.add( _acceleration );\n\n        var l = this.velocity.length();\n\n        if ( l > _maxSpeed ) {\n\n            this.velocity.divideScalar( l / _maxSpeed );\n\n        }\n\n        this.position.add( this.velocity );\n        _acceleration.set( 0, 0, 0 );\n\n    };\n\n    this.checkBounds = function () {\n\n        if ( this.position.x >   _width ) this.position.x = - _width;\n        if ( this.position.x < - _width ) this.position.x =   _width;\n        if ( this.position.y >   _height ) this.position.y = - _height;\n        if ( this.position.y < - _height ) this.position.y =  _height;\n        if ( this.position.z >  _depth ) this.position.z = - _depth;\n        if ( this.position.z < - _depth ) this.position.z =  _depth;\n\n    };\n\n    //\n\n    this.avoid = function ( target ) {\n\n        var steer = new THREE.Vector3();\n\n        steer.copy( this.position );\n        steer.sub( target );\n\n        steer.multiplyScalar( 1 / this.position.distanceToSquared( target ) );\n\n        return steer;\n\n    };\n\n    this.repulse = function ( target ) {\n\n        var distance = this.position.distanceTo( target );\n\n        if ( distance < 150 ) {\n\n            var steer = new THREE.Vector3();\n\n            steer.subVectors( this.position, target );\n            steer.multiplyScalar( 0.5 / distance );\n\n            _acceleration.add( steer );\n\n        }\n\n    };\n\n    this.reach = function ( target, amount ) {\n\n        var steer = new THREE.Vector3();\n\n        steer.subVectors( target, this.position );\n        steer.multiplyScalar( amount );\n\n        return steer;\n\n    };\n\n    this.alignment = function ( boids ) {\n\n        var count = 0;\n        var velSum = new THREE.Vector3();\n\n        for ( var i = 0, il = boids.length; i < il; i++ ) {\n\n            if ( Math.random() > 0.6 ) continue;\n\n            var boid = boids[ i ];\n            var distance = boid.position.distanceTo( this.position );\n\n            if ( distance > 0 && distance <= _neighborhoodRadius ) {\n\n                velSum.add( boid.velocity );\n                count++;\n\n            }\n\n        }\n\n        if ( count > 0 ) {\n\n            velSum.divideScalar( count );\n\n            var l = velSum.length();\n\n            if ( l > _maxSteerForce ) {\n\n                velSum.divideScalar( l / _maxSteerForce );\n\n            }\n\n        }\n\n        return velSum;\n\n    };\n\n    this.cohesion = function ( boids ) {\n\n        var count = 0;\n        var posSum = new THREE.Vector3();\n        var steer = new THREE.Vector3();\n\n        for ( var i = 0, il = boids.length; i < il; i ++ ) {\n\n            if ( Math.random() > 0.6 ) continue;\n\n            var boid = boids[ i ];\n            var distance = boid.position.distanceTo( this.position );\n\n            if ( distance > 0 && distance <= _neighborhoodRadius ) {\n\n                posSum.add( boid.position );\n                count++;\n\n            }\n\n        }\n\n        if ( count > 0 ) {\n\n            posSum.divideScalar( count );\n\n        }\n\n        steer.subVectors( posSum, this.position );\n\n        var l = steer.length();\n\n        if ( l > _maxSteerForce ) {\n\n            steer.divideScalar( l / _maxSteerForce );\n\n        }\n\n        return steer;\n\n    };\n\n    this.separation = function ( boids ) {\n\n        var posSum = new THREE.Vector3();\n        var repulse = new THREE.Vector3();\n\n        for ( var i = 0, il = boids.length; i < il; i ++ ) {\n\n            if ( Math.random() > 0.6 ) continue;\n\n            var boid = boids[ i ];\n            var distance = boid.position.distanceTo( this.position );\n\n            if ( distance > 0 && distance <= _neighborhoodRadius ) {\n\n                repulse.subVectors( this.position, boid.position );\n                repulse.normalize();\n                repulse.divideScalar( distance );\n                posSum.add( repulse );\n\n            }\n\n        }\n\n        return posSum;\n\n    }\n\n};"]}